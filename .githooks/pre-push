#!/bin/bash
#
# Git pre-push hook for claude-code-omystatusline
# 在推送前執行測試檢查，確保代碼品質
#
# This hook is called with the following parameters:
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done

set -e

# 顏色定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 顯示函式
print_header() {
    echo ""
    echo -e "${BLUE}╔════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${NC}  Pre-Push Checks - Claude Code omystatusline              ${BLUE}║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

# 檢查失敗計數
FAILED_CHECKS=0

# 顯示標題
print_header

# ============================================================================
# 檢查 1: 工作目錄狀態
# ============================================================================
print_info "檢查 1/5: 工作目錄狀態"

if [ -n "$(git status --porcelain)" ]; then
    print_warning "有未提交的變更"
    git status --short
    echo ""
    read -p "$(echo -e ${YELLOW}是否繼續推送？ [y/N]: ${NC})" -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_error "推送已取消"
        exit 1
    fi
else
    print_success "工作目錄乾淨"
fi

echo ""

# ============================================================================
# 檢查 2: Go 代碼編譯
# ============================================================================
print_info "檢查 2/5: Go 代碼編譯"

if ! command -v go &> /dev/null; then
    print_warning "未找到 Go，跳過編譯檢查"
else
    if make build &> /tmp/build-output.log; then
        print_success "Go 代碼編譯成功"
    else
        print_error "Go 代碼編譯失敗"
        cat /tmp/build-output.log
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
    rm -f /tmp/build-output.log
fi

echo ""

# ============================================================================
# 檢查 3: Go 測試
# ============================================================================
print_info "檢查 3/5: Go 測試執行"

if ! command -v go &> /dev/null; then
    print_warning "未找到 Go，跳過測試"
else
    if make test &> /tmp/test-output.log; then
        print_success "Go 測試通過"
    else
        print_error "Go 測試失敗"
        cat /tmp/test-output.log
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
    rm -f /tmp/test-output.log
fi

echo ""

# ============================================================================
# 檢查 4: Shell 腳本語法
# ============================================================================
print_info "檢查 4/5: Shell 腳本語法檢查"

SHELL_SCRIPTS=("scripts/install.sh" "scripts/statusline-wrapper.sh" "scripts/statusline.sh")
SHELL_CHECK_FAILED=0

for script in "${SHELL_SCRIPTS[@]}"; do
    if [ -f "$script" ]; then
        if bash -n "$script" 2>&1; then
            print_success "$script 語法正確"
        else
            print_error "$script 語法錯誤"
            SHELL_CHECK_FAILED=$((SHELL_CHECK_FAILED + 1))
        fi
    fi
done

if [ $SHELL_CHECK_FAILED -gt 0 ]; then
    FAILED_CHECKS=$((FAILED_CHECKS + 1))
fi

echo ""

# ============================================================================
# 檢查 5: 安裝腳本測試（乾跑）
# ============================================================================
print_info "檢查 5/5: 安裝腳本語法檢查"

if [ -f "scripts/install.sh" ]; then
    # 檢查腳本語法
    if bash -n "scripts/install.sh" 2>&1; then
        print_success "安裝腳本語法正確"
    else
        print_error "安裝腳本語法錯誤"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
else
    print_warning "未找到 scripts/install.sh"
fi

echo ""

# ============================================================================
# 結果摘要
# ============================================================================
echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}"

if [ $FAILED_CHECKS -eq 0 ]; then
    echo -e "${GREEN}✓ 所有檢查通過！${NC}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}"
    echo ""
    exit 0
else
    echo -e "${RED}✗ 有 $FAILED_CHECKS 項檢查失敗${NC}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${YELLOW}請修正上述問題後再推送${NC}"
    echo ""
    read -p "$(echo -e ${YELLOW}是否強制推送？ [y/N]: ${NC})" -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_warning "強制推送已允許"
        exit 0
    else
        print_error "推送已取消"
        exit 1
    fi
fi
