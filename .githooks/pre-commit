#!/bin/bash
#
# Git pre-commit hook for claude-code-omystatusline
# 在提交前執行格式化、程式碼檢查和測試，確保代碼品質
#
# This hook is called before commit is finalized

set -e

# 顏色定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 顯示函式
print_header() {
    echo ""
    echo -e "${BLUE}╔════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${NC}  Pre-Commit Checks - Claude Code omystatusline            ${BLUE}║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

# 檢查失敗計數
FAILED_CHECKS=0

# 顯示標題
print_header

# ============================================================================
# 檢查 1: Go 格式化 (make fmt)
# ============================================================================
print_info "檢查 1/3: Go 程式碼格式化 (make fmt)"

if ! command -v go &> /dev/null; then
    print_warning "未找到 Go，跳過格式化檢查"
else
    # 先檢查是否有需要格式化的文件
    UNFORMATTED=$(gofmt -s -l . 2>&1)

    if [ -n "$UNFORMATTED" ]; then
        print_info "發現需要格式化的文件："
        echo "$UNFORMATTED"

        # 自動執行格式化
        print_info "執行 make fmt 自動格式化..."
        if make fmt &> /dev/null; then
            print_success "程式碼已自動格式化"

            # 將格式化的文件加入暫存區
            echo "$UNFORMATTED" | while IFS= read -r file; do
                if [ -f "$file" ]; then
                    git add "$file"
                    print_info "已將 $file 加入暫存區"
                fi
            done
        else
            print_error "格式化失敗"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
        fi
    else
        print_success "程式碼格式正確"
    fi
fi

echo ""

# ============================================================================
# 檢查 2: Go Lint (make lint)
# ============================================================================
print_info "檢查 2/3: Go 程式碼檢查 (make lint)"

if ! command -v go &> /dev/null; then
    print_warning "未找到 Go，跳過 lint 檢查"
else
    if make lint &> /tmp/lint-output.log; then
        print_success "Lint 檢查通過"
    else
        print_error "Lint 檢查失敗"
        echo ""
        echo "詳細錯誤信息："
        cat /tmp/lint-output.log
        echo ""
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
    rm -f /tmp/lint-output.log
fi

echo ""

# ============================================================================
# 檢查 3: Go 測試 (make test)
# ============================================================================
print_info "檢查 3/3: Go 測試執行 (make test)"

if ! command -v go &> /dev/null; then
    print_warning "未找到 Go，跳過測試"
else
    if make test &> /tmp/test-output.log; then
        print_success "測試通過"
    else
        print_error "測試失敗"
        echo ""
        echo "詳細錯誤信息："
        cat /tmp/test-output.log
        echo ""
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
    rm -f /tmp/test-output.log
fi

echo ""

# ============================================================================
# 結果摘要
# ============================================================================
echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}"

if [ $FAILED_CHECKS -eq 0 ]; then
    echo -e "${GREEN}✓ 所有檢查通過！準備提交${NC}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}"
    echo ""
    exit 0
else
    echo -e "${RED}✗ 有 $FAILED_CHECKS 項檢查失敗${NC}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${YELLOW}請修正上述問題後再提交${NC}"
    echo ""
    echo "如需跳過此檢查，使用："
    echo "  git commit --no-verify"
    echo ""
    exit 1
fi
